# Generated by Django 5.1.3 on 2024-12-07 00:34

import django.core.validators
import django.db.models.deletion
import gelfmp.utils.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BankDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_code', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(message='Insira um número válido, usando o formato 000 (3 dígitos).', regex='^\\d{3}')], verbose_name='Número do Banco')),
                ('bank_name', models.CharField(max_length=255, verbose_name='Banco')),
                ('agency', models.CharField(max_length=10, verbose_name='Agência')),
                ('account_number', models.CharField(max_length=20, verbose_name='Número da Conta')),
            ],
            options={
                'verbose_name': 'Detalhes Bancários',
                'verbose_name_plural': 'Detalhes Bancários',
                'ordering': ['bank_name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('abbr', models.CharField(max_length=2, primary_key=True, serialize=False, verbose_name='Sigla')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
            ],
            options={
                'verbose_name': 'Estado',
                'verbose_name_plural': 'Estados',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gelfmp.state', verbose_name='Estado')),
            ],
            options={
                'verbose_name': 'Cidade',
                'verbose_name_plural': 'Cidades',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('rm_code', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='Código RM')),
                ('active', models.BooleanField(default=True, verbose_name='Fornecedor Ativo')),
                ('corporate_name', models.CharField(help_text='Insira nomes padronizados para evitar inconsistência, como o próprio nome que consta no CNPJ.', max_length=200, unique=True, verbose_name='Razão Social')),
                ('material_type', models.CharField(choices=[('Minério de Ferro', 'Minério de Ferro'), ('Subprodutos', 'Subprodutos'), ('Carvão Vegetal', 'Carvão Vegetal'), ('Bauxita', 'Bauxita'), ('Argila', 'Argila'), ('Areia', 'Areia'), ('Calcario', 'Calcario'), ('FeSiMg', 'FeSiMg'), ('Ferroligas', 'Ferroligas'), ('Mistura', 'Mistura'), ('Fluorita', 'Fluorita'), ('Dolomita', 'Dolomita'), ('Grafite', 'Grafite')], max_length=100, verbose_name='Tipo de Material')),
                ('distance_in_meters', models.IntegerField(blank=True, null=True, verbose_name='Distância em Metros')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Endereço')),
                ('cep', models.CharField(help_text='Insira apenas os números.', max_length=8, validators=[django.core.validators.RegexValidator(message='Insira um CEP válido, digitando apenas os números.', regex='^\\d{8}$')], verbose_name='CEP')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[gelfmp.utils.validators.validate_latitude])),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[gelfmp.utils.validators.validate_longitude])),
                ('state_registration', models.CharField(blank=True, max_length=50, null=True, verbose_name='Inscrição Estadual')),
                ('municipal_registration', models.CharField(blank=True, max_length=50, null=True, verbose_name='Inscrição Municipal')),
                ('xml_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email XML')),
                ('cpf_cnpj', models.CharField(help_text='Insira apenas os números.', max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message='Insira um CPF ou CNPJ válido, digitando apenas os números.', regex='^(\\w{14}|\\d{11})$')], verbose_name='CPF ou CNPJ')),
                ('observations', models.TextField(blank=True, help_text='Adicione informações adicionais ou observações relevantes.', max_length=2000, null=True, verbose_name='Observações')),
                ('bank_details', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gelfmp.bankdetails', verbose_name='Detalhes Bancários')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='suppliers', to='gelfmp.city', verbose_name='Cidade')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='suppliers', to='gelfmp.state', verbose_name='Estado')),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': 'Fornecedores',
                'ordering': ['corporate_name'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('name', models.CharField(max_length=80, verbose_name='Nome')),
                ('type', models.CharField(max_length=80, verbose_name='Tipo de Documento')),
                ('filepath', models.CharField(blank=True, max_length=355, null=True, verbose_name='Link do Arquivo')),
                ('validity', models.DateField(blank=True, null=True, verbose_name='Validade')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='gelfmp.supplier', verbose_name='Fornecedor')),
            ],
            options={
                'verbose_name': 'Documento',
                'verbose_name_plural': 'Documentos',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('contact_type', models.CharField(choices=[('witness', 'Testemunha'), ('legal_representative', 'Representante Legal'), ('accounting_responsible', 'Responsável do Setor Contábil'), ('negotiation_responsible', 'Responsável pela Negociação'), ('nf_resp', 'Responsável pela Emissão de Notas Fiscais')], max_length=50, verbose_name='Função')),
                ('name', models.CharField(max_length=200, verbose_name='Nome')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('primary_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone Principal')),
                ('secondary_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone Secundário')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='gelfmp.supplier', verbose_name='Fornecedor')),
            ],
            options={
                'verbose_name': 'Contato',
                'verbose_name_plural': 'Contatos',
            },
        ),
        migrations.CreateModel(
            name='CharcoalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('entry_date', models.DateField(verbose_name='Data de Entrada')),
                ('origin_ticket', models.CharField(max_length=50, unique=True, verbose_name='Ticket de Origem')),
                ('vehicle_plate', models.CharField(max_length=50, verbose_name='Placa do Veículo')),
                ('origin_volume', models.FloatField(verbose_name='Volume de Origem (m³)')),
                ('entry_volume', models.FloatField(verbose_name='Volume de Entrada (m³)')),
                ('moisture', models.FloatField(verbose_name='Umidade (%)')),
                ('fines', models.FloatField(verbose_name='Finos (%)')),
                ('density', models.FloatField(verbose_name='Densidade')),
                ('dcf', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Insira uma DCF válida, usando o formato 0000000000000/00-00.', regex='^\\d{13}/\\d{2}-\\d{2}$')], verbose_name='DCF')),
                ('gcae', models.CharField(max_length=50, verbose_name='GCAE')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charcoal_entries', to='gelfmp.supplier', verbose_name='Fornecedor')),
            ],
            options={
                'verbose_name': 'Entrada de Carvão',
                'verbose_name_plural': 'Entradas de Carvão',
                'ordering': ['-entry_date'],
            },
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['material_type'], name='gelfmp_supp_materia_72a935_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['state'], name='gelfmp_supp_state_i_b538ae_idx'),
        ),
        migrations.AddIndex(
            model_name='charcoalentry',
            index=models.Index(fields=['entry_date'], name='gelfmp_char_entry_d_506da5_idx'),
        ),
    ]
